x <- c(1,"Canada",3)
x
class(x)
x <- 1:5
x <- as.character(x)
y <- as.character(x)
y
as.numeric(y)
x <- c("1","b","3")
class(x)
as.numeric(x)
sort(murders$total)
library(tidyverse)
library(dslabs)
data("murders")
murders %>%
ggplot(aes(population, total, label = abb, color = region)) +
geom_label()
# assigning values to variables
a <-2
b <-3
c <- -2
# solving the quadratic equation (sqrt) calcula la raiz cuadrada.
(-b + sqrt(b^2 - 4*a*c))/(2*a)
(-b - sqrt(b^2 - 4*a*c))/(2*a)
log(1) #1 es el argumento
log(exp(1)) #exponente sera el primer argumente y luego el log
data("murders")
class(murders)
str(murders)
head(murders)
murders$population
pop <- murders$population
length(pop)
class(pop)
a <- 1
a
"a"
class(murders$state)
z <- 3 == 2 # == is a relational operator, diferente from = that will assign 2 to 3, and give us an error
z
class(z)
class(murders$region) # factors are useful to restoring categorical data. Regions are categorical, there's four categories, that you can see with the function levels, Factors creates some confusion because can be taken as characters
levels(murders$region)
codes <- c(350,222,223)
class(codes)
country <- c("italy","canada","egypt")
codes <- c(italy=350, canada=222, egypt=223) #You can use "" to define the names but is exactly the same as this function
codes
names(codes) <- country
codes
seq(1,10) #seq mean sequence, the first argument defines the start and the second the end of the sequence. The third arguments (1,10,1) defines the jump of the sequence
seq(1:10) #we use : if we want integers
codes[2]
codes[c(1,2)]#Now we get the first and second elements
codes[c(1:3)] #Can get from 1 to 3
codes["canada"]
codes[c("canada","egypt")]
x <- c(1,"Canada",3)
x
class(x)
x <- 1:5 #numbers
y <- as.character(x)
y
as.numeric(y)
x <- c("1","b","3")
class(x)
as.numeric(x)
sort(murders$total)
z
x <- c(31, 4, 15, 92, 65)
x
sort(x)
order(x)
index <- order(x)
x[index]
x
order(x)
library(tidyverse)
library(dslabs)
data("murders")
murders %>%
ggplot(aes(population, total, label = abb, color = region)) +
geom_label()
# assigning values to variables
a <-2
b <-3
c <- -2
# solving the quadratic equation (sqrt) calcula la raiz cuadrada.
(-b + sqrt(b^2 - 4*a*c))/(2*a)
(-b - sqrt(b^2 - 4*a*c))/(2*a)
log(1) #1 es el argumento
log(exp(1)) #exponente sera el primer argumente y luego el log
data("murders")
class(murders)
str(murders)
head(murders)
murders$population
pop <- murders$population
length(pop)
class(pop)
a <- 1
a
"a"
class(murders$state)
z <- 3 == 2 # == is a relational operator, diferente from = that will assign 2 to 3, and give us an error
z
class(z)
class(murders$region) # factors are useful to restoring categorical data. Regions are categorical, there's four categories, that you can see with the function levels, Factors creates some confusion because can be taken as characters
levels(murders$region)
codes <- c(350,222,223)
class(codes)
country <- c("italy","canada","egypt")
codes <- c(italy=350, canada=222, egypt=223) #You can use "" to define the names but is exactly the same as this function
codes
names(codes) <- country
codes
seq(1,10) #seq mean sequence, the first argument defines the start and the second the end of the sequence. The third arguments (1,10,1) defines the jump of the sequence
seq(1:10) #we use : if we want integers
codes[2]
codes[c(1,2)]#Now we get the first and second elements
codes[c(1:3)] #Can get from 1 to 3
codes["canada"]
codes[c("canada","egypt")]
x <- c(1,"Canada",3)
x
class(x)
x <- 1:5 #numbers
y <- as.character(x)
y
as.numeric(y)
x <- c("1","b","3")
class(x)
as.numeric(x)
sort(murders$total)
x <- c(31, 4, 15, 92, 65)
x
sort(x)
index <- order(x)
x[index]
x
order(x) #this is the index that puts the vector x in order
sort(x)    # puts elements in order
index <- order(x)    # returns index that will put x in order
x[index]    # rearranging by this index puts elements in order
order(x)
murders$state[1:10]
murders$abb[1:10]
index <- order(murders$total)
murders$abb[index]    # order abbreviations by total murders
max(murders$total)    # highest number of total murders
i_max <- which.max(murders$total)    # index with highest number of murders
murders$state[i_max]    # state name with highest number of total murders
x <- c(31, 4, 15, 92, 65)
x
rank(x)    # returns ranks (smallest to largest)
View(murders)
murders$state[which.max(murders$population)]
max(murders$population)
heights <- c(69,62,66,70,70,73,67,73,67,70)
heights * 2.54
murders_rate <- murders$total/murders$population*100000
murders$state[order(murders_rate)]
murders$state[order(murders_rate, decreasing=TRUE)]
index <- murders_rate < 0.71
index
index <- murders_rate <= 0.71
index
murders$state[index]
sum(murders$state[index])
sum(index)
west <- murders$region == west
west <- murders$region == West
west <- murders$region == "West"
final = west & safe
safe <- murders_rate <= 1
final = west & safe
final
murders$state[final]
index = west & safe
index
murders$state[index]
